# -*- coding: utf-8 -*-
"""Copy of SA1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Stp8b0iX1NjhT4_YeT9kb4TbrEcdQNNt

Q1. Linked list operations
"""

# Implementing Linked Lists

# Node class for the individual nodes
class Node:

    # constructor for Node class
    def __init__(self, data):
        self.data = data
        self.next = None
 
# Manager class to link the nodes and manage the overall list
class LinkedList:

    # constructor for LinkedList class
    def __init__(self):
        self.head = None
    

    # Push: Adds a new element at the head of the list
    def push(self, data):
        if self.head is None:
            self.head = Node(data)
        else:
            new_node = Node(data)
            new_node.next = self.head
            self.head = new_node


    # Pop: Deletes the element at the last and returns the value of it
    def pop(self):
        if self.head is None:
            return None
        else:
            popped = self.head.data
            self.head = self.head.next
        return popped


    # Returns the size of the linked list
    def size(self):
        temp = self.head
        count = 0
        while (temp):
            count += 1
            temp = temp.next
        return count


    # Function to insert a node containing data at some specified position between 1 and x
    def insert(self, data, position):
        # comment out pass and add your code here
        if self.isEmpty():
          self.head = Node(data)
        elif position == 1:
          node = Node(data)
          node.next=self.head
          self.head=node
        else:
          cur_pos = 2
          cur_node=self.head
          node = Node(data)
          while cur_pos < position and cur_node.next != None:
            cur_pos+=1
            cur_node=cur_node.next
          node.next = cur_node.next
          cur_node.next = node

          

    # Function to delete a node at the specified position between 1 and x
    def delete(self, position):
        # comment out pass and add your code here
        if self.isEmpty():
          return
        elif position == 1:
          node = self.head
          self.head = self.head.next
          del node
          return
        else:
          cur_pos = 2
          cur_node=self.head
          while cur_pos < position and cur_node.next != None:
            cur_pos+=1
            cur_node=cur_node.next
          if cur_node.next!=None:
            del_node = cur_node.next
            cur_node.next = cur_node.next.next
            del del_node
            return
        


    # Return the element at the top of the linked list without removing it
    def top(self):
        if self.head is None:
            return None
        else:
            return self.head.data


    # Return true is linked list is empty, False if not
    def isEmpty(self):
        return self.head is None


    def printIsEmpty(self):
        print("\Linked list is Empty\n") if self.isEmpty() else print("\Linked list is not Empty\n")


    # Reverses the linked list in place
    def reverseList(self):
        prev = None
        current = self.head
        while(current is not None):
            next = current.next
            current.next = prev
            prev = current
            current = next
        self.head = prev


    def printList(self):
        temp = self.head
        print("\nThe linked list created is as follows: \n")
        while(temp):
            print (temp.data,end=" ")
            temp = temp.next

A = LinkedList()
A.push(7)
A.push(5)
A.push(3)
A.push(1)
print(A.size() == 4)
A.insert(6, 10) # should work if the condition on x is specified correctly otherwise will raise an error
print(A.size() == 5)
# A.delete(3)
# A.printList()
# A.delete(7)
A.printList()

"""Q2. Queue"""

# Queue using an array

# Queue has FIFO order
class QueueUsingArrays:
  
    def __init__(self):
        self.queue = []
        self.front = 0 
        self.rear = 0


    # Enqueue Function
    # Adding an element happens at the end of the list because it follows FIFO
    def enqueue(self, data, tag):
        # comment out pass and add your code here
        pos=0
        for dt,tg in self.queue:
          if tg == tag:
            pos2=pos
            for dt2,tg2 in self.queue[pos:]:
              if tg2!=tag:
                break
              pos2+=1
            self.queue.insert(pos2, (data, tag))
            self.rear+=1
            return
          pos+=1
        self.queue.append((data, tag))
        #pass



    # Dequeue Function
    # Function to delete an element from the front of the queue
    def dequeue(self):
        if(self.isEmpty()):
            # print("\nQueue is empty")
            return None
        else:
            frontElement = self.queue[self.front]
            self.queue.pop(0)
            self.rear -= 1
            # print("Dequeued element is : ", frontElement)
            return frontElement


    # returns the size of the queue
    def size(self):
        return len(self.queue)


    # Function to check if the queue is empty or not
    def isEmpty(self): 
        return True if len(self.queue) == 0 else False


    def printIsEmpty(self):
        print("Queue is Empty\n") if self.isEmpty() else print("Queue is not Empty\n")


    # Function to print all the queue elements
    def printQueue(self):
        if(self.isEmpty()):
            print("\nQueue is Empty")
        else: 
            print(self.queue)


    # Print front of queue
    def frontElement(self):
        if(self.isEmpty()):
            return None
        else: 
            return self.queue[self.front]

A = QueueUsingArrays()
A.enqueue(6, 'A')
A.enqueue(5, 'B')
A.enqueue(7, 'A')
A.printQueue()

# Output should look like the following: front [(6, 'A'), (7, 'A'), (5, 'B')] rear